{"version":3,"sources":["helpers/window.coffee","helpers/window.js"],"names":["app","BrowserWindow","screen","jetpack","name","options","defaultSize","ensureVisibleOnSomeDisplay","getCurrentPosition","resetToDefaults","restore","saveState","state","stateStoreFile","userDataDir","win","windowWithinBounds","cwd","getPath","width","height","restoredState","read","error","Object","assign","position","size","getPosition","getSize","x","y","windowState","bounds","getPrimaryDisplay","visible","getAllDisplays","some","display","isMinimized","isMaximized","write","atomic","on"],"mappings":"AAKA,OAASA,GAAT,CAAcC,aAAd,CAA6BC,MAA7B,KAAA,UAAA,CACA,MAAOC,QAAP,KAAA,YAAA,CAEA,cAAe,UAACC,CAAD,CAAOC,CAAP,CAAA,CACb,GAAAC,EAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CC8DA,MD9DAF,GAAcX,QAAQc,GAAR,CAAYjB,IAAIkB,OAAJ,CAAY,UAAZ,CAAZ,CC8Dd,CD7DAL,EAAiB,gBAAkBT,CAAlB,CAAyB,OC6D1C,CD5DAE,EACE,CAAAa,MAAOd,EAAQc,KAAf,CACAC,OAAQf,EAAQe,MADhB,CC2DF,CDzDAR,ICyDA,CDxDAG,EAAM,IAAA,ECwDN,CDtDAL,EAAU,UAAA,CACR,GAAAW,KAAA,CACA,GAAA,CACEA,EAAgBP,EAAYQ,IAAZ,CAAiBT,CAAjB,CAAiC,MAAjC,CADlB,CAAA,MAAAU,CAAA,CAAA,CCMC,CACD,MDFAC,QAAOC,MAAP,IAAkBnB,CAAlB,CAA+Be,CAA/B,CAPQ,CCsDV,CD7CAb,EAAqB,UAAA,CACnB,GAAAkB,EAAA,CAAAC,CAAA,CCKA,MDLAD,GAAWX,EAAIa,WAAJ,ECKX,CDJAD,EAAOZ,EAAIc,OAAJ,ECIP,CDHA,CACEC,EAAGJ,EAAS,CAAT,CADL,CAEEK,EAAGL,EAAS,CAAT,CAFL,CAGEP,MAAOQ,EAAK,CAAL,CAHT,CAIEP,OAAQO,EAAK,CAAL,CAJV,CAHmB,CC6CrB,CDnCAX,EAAqB,SAACgB,CAAD,CAAcC,CAAd,CAAA,CCInB,MDHAD,GAAYF,CAAZ,EAAiBG,EAAOH,CAAxB,EAA8BE,EAAYD,CAAZ,EAAiBE,EAAOF,CAAtD,EAA4DC,EAAYF,CAAZ,CAAgBE,EAAYb,KAA5B,EAAqCc,EAAOH,CAAP,CAAWG,EAAOd,KAAnH,EAA6Ha,EAAYD,CAAZ,CAAgBC,EAAYZ,MAA5B,EAAsCa,EAAOF,CAAP,CAAWE,EAAOb,MADlK,CCmCrB,CDhCAX,EAAkB,UAAA,CAChB,GAAAwB,EAAA,CCKA,MDLAA,GAAS/B,OAAOgC,iBAAP,GAA2BD,MCKpC,CDJAT,OAAOC,MAAP,IAAkBnB,CAAlB,CACE,CAAAwB,EAAG,CAACG,EAAOd,KAAP,CAAgBb,EAAYa,KAA7B,EAAuC,CAA1C,CACAY,EAAG,CAACE,EAAOb,MAAP,CAAiBd,EAAYc,MAA9B,EAAyC,CAD5C,CADF,CAFgB,CCgClB,CD1BAb,EAA6B,SAACyB,CAAD,CAAA,CAC3B,GAAAG,EAAA,CAD2B,MAC3BA,GAAUjC,OAAOkC,cAAP,GAAwBC,IAAxB,CAA6B,SAACC,CAAD,CAAA,CCOrC,MDNAtB,GAAmBgB,CAAnB,CAAgCM,EAAQL,MAAxC,CADQ,CAAA,CADiB,CAIvBE,CAJuB,CAQ3BH,CAR2B,CAOlBvB,EAAgBuB,CAAhB,CAPkB,CC0B7B,CDhBArB,EAAY,UAAA,CACNI,EAAIwB,WAAJ,EAAD,EAAwBxB,EAAIyB,WAAJ,EADjB,EAERhB,OAAOC,MAAP,CAAcb,CAAd,CAAqBJ,GAArB,CAFQ,CAGVM,EAAY2B,KAAZ,CAAkB5B,CAAlB,CAAkCD,CAAlC,CAAyC,CAAA8B,SAAA,CAAzC,CAHU,CCgBZ,CDVA9B,EAAQL,EAA2BG,GAA3B,CCUR,CDTAK,EAAU,GAAAd,cAAA,CAAcuB,OAAOC,MAAP,IAAkBpB,CAAlB,CAA2BO,CAA3B,CAAd,CCSV,CDRAG,EAAI4B,EAAJ,CAAO,OAAP,CAAgBhC,CAAhB,CCQA,CDPAI,CAxDa","file":"../../js/helpers/window.min.js","sourcesContent":[null,"import {\n  app,\n  BrowserWindow,\n  screen\n} from 'electron';\n\nimport jetpack from 'fs-jetpack';\n\nexport default function(name, options) {\n  var defaultSize, ensureVisibleOnSomeDisplay, getCurrentPosition, resetToDefaults, restore, saveState, state, stateStoreFile, userDataDir, win, windowWithinBounds;\n  userDataDir = jetpack.cwd(app.getPath('userData'));\n  stateStoreFile = 'window-state-' + name + '.json';\n  defaultSize = {\n    width: options.width,\n    height: options.height\n  };\n  state = {};\n  win = void 0;\n  restore = function() {\n    var err, restoredState;\n    restoredState = {};\n    try {\n      restoredState = userDataDir.read(stateStoreFile, 'json');\n    } catch (error) {\n      err = error;\n    }\n    return Object.assign({}, defaultSize, restoredState);\n  };\n  getCurrentPosition = function() {\n    var position, size;\n    position = win.getPosition();\n    size = win.getSize();\n    return {\n      x: position[0],\n      y: position[1],\n      width: size[0],\n      height: size[1]\n    };\n  };\n  windowWithinBounds = function(windowState, bounds) {\n    return windowState.x >= bounds.x && windowState.y >= bounds.y && windowState.x + windowState.width <= bounds.x + bounds.width && windowState.y + windowState.height <= bounds.y + bounds.height;\n  };\n  resetToDefaults = function(windowState) {\n    var bounds;\n    bounds = screen.getPrimaryDisplay().bounds;\n    return Object.assign({}, defaultSize, {\n      x: (bounds.width - defaultSize.width) / 2,\n      y: (bounds.height - defaultSize.height) / 2\n    });\n  };\n  ensureVisibleOnSomeDisplay = function(windowState) {\n    var visible;\n    visible = screen.getAllDisplays().some(function(display) {\n      return windowWithinBounds(windowState, display.bounds);\n    });\n    if (!visible) {\n      return resetToDefaults(windowState);\n    }\n    return windowState;\n  };\n  saveState = function() {\n    if (!win.isMinimized() && !win.isMaximized()) {\n      Object.assign(state, getCurrentPosition());\n    }\n    userDataDir.write(stateStoreFile, state, {\n      atomic: true\n    });\n  };\n  state = ensureVisibleOnSomeDisplay(restore());\n  win = new BrowserWindow(Object.assign({}, options, state));\n  win.on('close', saveState);\n  return win;\n};\n"]}