{"version":3,"file":"../../coffee/helpers/window.js","sources":["helpers/window.coffee"],"names":[],"mappings":"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","sourcesContent":["# This helper remembers the size and position of your windows (and restores\n# them in that place after app relaunch).\n# Can be used for more than one window, just construct many\n# instances of it and give each different name.\n\nimport { app, BrowserWindow, screen } from 'electron';\nimport jetpack from 'fs-jetpack';\n\nexport default (name, options) =>\n  userDataDir = jetpack.cwd(app.getPath('userData'))\n  stateStoreFile = 'window-state-' + name + '.json'\n  defaultSize =\n    width: options.width\n    height: options.height\n  state = {}\n  win = undefined\n\n  restore = ->\n    restoredState = {}\n    try\n      restoredState = userDataDir.read(stateStoreFile, 'json')\n    catch err\n      # For some reason json can't be read (might be corrupted).\n      # No worries, we have defaults.\n    Object.assign {}, defaultSize, restoredState\n\n  getCurrentPosition = ->\n    position = win.getPosition()\n    size = win.getSize()\n    {\n      x: position[0]\n      y: position[1]\n      width: size[0]\n      height: size[1]\n    }\n\n  windowWithinBounds = (windowState, bounds) ->\n    windowState.x >= bounds.x and windowState.y >= bounds.y and windowState.x + windowState.width <= bounds.x + bounds.width and windowState.y + windowState.height <= bounds.y + bounds.height\n\n  resetToDefaults = (windowState) ->\n    bounds = screen.getPrimaryDisplay().bounds\n    Object.assign {}, defaultSize,\n      x: (bounds.width - (defaultSize.width)) / 2\n      y: (bounds.height - (defaultSize.height)) / 2\n\n  ensureVisibleOnSomeDisplay = (windowState) ->\n    visible = screen.getAllDisplays().some((display) ->\n      windowWithinBounds windowState, display.bounds\n    )\n    if !visible\n      # Window is partially or fully not visible now.\n      # Reset it to safe defaults.\n      return resetToDefaults(windowState)\n    windowState\n\n  saveState = ->\n    if !win.isMinimized() and !win.isMaximized()\n      Object.assign state, getCurrentPosition()\n    userDataDir.write stateStoreFile, state, atomic: true\n    return\n\n  state = ensureVisibleOnSomeDisplay(restore())\n  win = new BrowserWindow(Object.assign({}, options, state))\n  win.on 'close', saveState\n  win\n"]}